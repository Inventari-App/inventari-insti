<% layout('layouts/boilerplate')%>

<h3 id="titol">Nova Comanda</h3>
<p></p>
<p></p>
<div class="container">
  <form id="add-row-form" autocomplete="off" action="#">
    <table id="add-row-table" class="table table-condensed table-striped">
      <tr>
        <th>Quantitat</th>
        <th>Item</th>
        <th>Preu unitari</th>
        <th>Tipus IVA</th>
        <th>Unitat de destí</th>
        <th>Proveidor</th>
        <th></th>
      </tr>

      <tr class="add-row-row">
        <div class="form-group">
          <td style="display: none">
            <input type="hidden" id="tipus" name="tipus" />
          </td>
          <td style="display: none">
            <input type="hidden" id="naturalesa" name="naturalesa" />
          </td>
          <td>
            <input
              type="number"
              class="numeros form-control quantitat"
              name="quantitat"
              id="quantitat"
              required
            />
          </td>
          <td>
            <input
              class="camps form-control autocomplete"
              type="text"
              id="item"
              name="article"
              required
              autocomplete="off"
            />
            <span class="error-message">L'item no existeix</span>
            <a href= "../items/new?tab=true" class="create-link" target="parent">Crear Item</a>
          </td>
          <td>
            <input
              type="number"
              class="numeros form-control preu"
              step="0.01"
              name="preu"
              id="preu"
              required
            />
          </td>
          <td>
            <input
              type="number"
              class="numeros form-control iva"
              step="0.01"
              name="iva"
              id="iva"
              placeholder="%"
              required
            />
          </td>
          <td style="display: none">
            <input name="subtotal" id="subtotal" required />
          </td>
          <td>
            <input
              type="text"
              class="camps form-control autocomplete"
              name="unitat"
              id="unitat"
              required
              autocomplete="off"
            />
            <span class="error-message">La unitat no existeix</span>
            <a href= "../unitats/new?tab=true" class="create-link" target="parent">Crear Unitat</a>
          </td>
          <td>
            <input
              type="text"
              class="camps form-control autocomplete"
              name="proveidor"
              id="proveidor"
              autocomplete="off"
              required
            />
            <span class="error-message">El proveidor no existeix</span>
            <a href= "../proveidors/new?tab=true" class="create-link" target="parent">Crear Proveidor</a>
          </td>
          <td>
            <button id="add-row-btn" class="btn btn-primary form-control">
              Afegir
            </button>
          </td>
        </div>
      </tr>

      <div class="row numeros" style="padding-right: 10%" id="crear"></div>
    </table>
  </form>

  <p></p>
  <p></p>
  <p class="h6">línies de comanda</p>

  <!-- Invoice items -->
  <table
    class="table table-condensed table-striped"
    id="invoice-items"
    style="display: none"
  >
    <tr>
      <th>Quantitat</th>
      <th>Item</th>
      <th>Preu unitari</th>
      <th>Tipus IVA</th>
      <th>Subtotal</th>
      <th>Unitat de destí</th>
      <th>Proveidor</th>
      <th></th>
    </tr>
  </table>

  <table>
    <div class="h5 row numeros">
      <span class="sumatori-total">Total Comanda: 0,00€ </span>
    </div>
  </table>

  <div class="mb-3">
    <button id="send-invoice" class="btn btn-success">Finalitza Comanda</button>
  </div>
</div>

<script>
</script>

<script>
  const invoiceItemsTable = document.querySelector("#invoice-items");
  const addRowTable = document.querySelector("#add-row-table");
  const addRowBtn = document.querySelector("#add-row-btn");
  const addRowForm = document.querySelector("#add-row-form");
  const totalEl = document.querySelector(".sumatori-total");
  const sendInvoiceBtn = document.querySelector("#send-invoice");

  const itemInputEl = addRowTable.querySelector('#item')
  const unitatInputEl = addRowTable.querySelector('#unitat')
  const proveidorInputEl = addRowTable.querySelector('#proveidor')

  const autocompleteInputs = addRowTable.querySelectorAll(".add-row-row input.autocomplete")
  Array.prototype.forEach.call(autocompleteInputs, inputEl => {
    inputEl.addEventListener('change', () => hideError(inputEl))
  })

  addRowTable.addEventListener("input", (e) => {
    const { target } = e;
    const rowEl = target.closest("tr");
    const rowTotal = getRowTotal(rowEl);
    const subtotalInput = addRowTable.querySelector('[name="subtotal"]');
    subtotalInput.value = rowTotal;
  });

  // Add row to invoice
  addRowForm.addEventListener("submit", async (e) => {
    e.preventDefault()
    // check autocompletes input
    // add row to table
    // get add row inputs
    const autocompleteInputsAreValid = await checkAutompleteInputs(addRowTable)
    if (!autocompleteInputsAreValid) return

    const addRowInputs = addRowTable.querySelectorAll(".add-row-row input");
    const inputValues = Array.prototype.map.call(addRowInputs, (inputEl) => {
      return {
        name: inputEl.name,
        value: inputEl.value,
        hidden: inputEl.type === "hidden",
      };
    });
    const newRowHTML = `
      <tr class='invoice-item'>
        ${inputValues.reduce((acc, curr) =>
            (acc += `
              <td
                name='${curr.name}'
                data-value='${curr.value}'
                style='display: ${curr.hidden ? "none" : "table-cell"}'
                class="align-middle"
              >
                ${curr.value}
              </td>
            `),
            ""
        )}
        <td>
          <button type="button" class="btn btn-danger delete-row-item">X</button>
        </td>
      </tr>
    `;
    invoiceItemsTable.rows[0].insertAdjacentHTML("afterend", newRowHTML);

    // display invoice items table
    invoiceItemsTable.style.display = "table";

    calculateTotals();

    // Keep only iva, unitat and proveidor filled
    Array.prototype.map.call(addRowInputs, (inputEl) => {
      const keep = /iva|unitat|proveidor/.test(inputEl.id)
      if (keep) return
      inputEl.value = ''
    })
  });

  // const deleteButtonEls = invoiceItemsTable.querySelectorAll('.delete-row-item')
  // Array.prototype.forEach.call(deleteButtonEls, deleteButtonEl => {})
  invoiceItemsTable.addEventListener("click", (e) => {
    const { target } = e;
    const isDeleteRowEl = target.classList.contains('delete-row-item')
    if (!isDeleteRowEl) return
    const invoiceItemRow = target.closest("tr.invoice-item");
    if (!invoiceItemRow) return;
    invoiceItemRow.remove();
    calculateTotals();
  });

  sendInvoiceBtn.addEventListener("click", (e) => {
    const confirmation = confirm("Estas segur que vols crear la comanda?")
    if (!confirmation) return

    const invoiceData = getInvoiceData();
    console.log(invoiceData);
    fetch("/invoices", {
      method: "POST",
      mode: "cors",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ invoiceItems: [...invoiceData] }),
    })
      .then((res) => res.json())
      .then(({ _id }) => (window.location.href = _id))
      .catch((e) => console.error(e));
  });

  function getRowTotal(rowEl) {
    const quantityEl = rowEl.querySelector(".quantitat");
    const priceEl = rowEl.querySelector(".preu");
    const ivaEl = rowEl.querySelector(".iva");
    if (!quantityEl || !priceEl) return 0;
    const total = parseFloat(quantityEl.value) * parseFloat(priceEl.value);
    const iva = (total * parseFloat(ivaEl.value)) / 100;
    return total + iva;
  }

  function getInvoiceData() {
    const rowEls = invoiceItemsTable.querySelectorAll("tr.invoice-item");
    return Array.prototype.map.call(rowEls, (rowEl) => {
      const rowInvoiceValues = Array.prototype.reduce.call(
        rowEl.cells,
        (acc, cellEl) => {
          return {
            ...acc,
            [cellEl.getAttribute("name")]: cellEl.dataset.value,
          };
        },
        {}
      );
      return rowInvoiceValues;
    });
  }

  function calculateTotals() {
    const subtotalEls = invoiceItemsTable.querySelectorAll('[name="subtotal"]');
    const total = Array.prototype.reduce.call(
      subtotalEls,
      (acc, curr) => (acc += parseFloat(curr.dataset.value)),
      0
    );
    totalEl.innerHTML = `Total Comanda: ${total.toFixed(2)}€`;
  }

  function showError (inputEl) {
    inputEl.classList.add('error')
    const messageErrorEl = inputEl.parentElement.querySelector('.error-message')
    messageErrorEl.style.display = 'block'
  }

  function hideError (inputEl) {
    inputEl.classList.remove('error')
    const messageErrorEl = inputEl.parentElement.querySelector('.error-message')
    messageErrorEl.style.display = 'none'
  }

  function checkAutompleteInput (inputEl, validInputs) {
    const isValid = validInputs.indexOf(inputEl.value) !== -1
    if (!isValid) showError(inputEl)
    return isValid
  }

  async function checkAutompleteInputs (addRowTable) {
    const [itemInputs, unitatInputs, proveidorInputs] = await Promise.all([
      fetchInputs('../items/all'),
      fetchInputs('../unitats/all'),
      fetchInputs('../proveidors/all')
    ])
    const itemInputIsValid = checkAutompleteInput(itemInputEl, itemInputs)
    const unitatInputIsValid = checkAutompleteInput(unitatInputEl, unitatInputs)
    const proveidorInputIsValid = checkAutompleteInput(proveidorInputEl, proveidorInputs)
    return itemInputIsValid && unitatInputIsValid && proveidorInputIsValid
  }

  function fetchInputs (route) {
    return fetch(route)
      .then(res => res.json())
      .then(data => {
        return data.map(d => d.nom)
      })
  }
</script>

<script type="module">
  const tipusInputEl = document.querySelector('#tipus')
  const naturalesaInputEl = document.querySelector('#naturalesa')
  const itemsInputEl = document.querySelector('#item');
  const unitatsInputEl = document.querySelector('#unitat');
  const proveidorsInputEl = document.querySelector('#proveidor');
  const _autocomplete = <%- autocomplete %>
  import Autocompleter from '../../utils/Autocompleter.js';

  Autocompleter({
    autocomplete: _autocomplete,
    inputEl: itemsInputEl,
    optionsRoute: '/items/all',
    onSelect: function(suggestion) {
      const {
        nom,
        naturalesa,
        tipus
      } = suggestion
      this.input.value = nom;
      naturalesaInputEl.value = naturalesa
      tipusInputEl.value = tipus
    },
    render: function(suggestion, currentInput) {
      if (suggestion) {
        const nom = suggestion.nom
        const div = document.createElement('div')
        div.setAttribute("id", "autocomplete-item");
        div.textContent = nom
        return div
      }
    }
  })
  Autocompleter({
    autocomplete: _autocomplete,
    inputEl: unitatsInputEl,
    optionsRoute: '/unitats/all',
    onSelect: function(suggestion) {
      const {
        nom,
        zona,
        planta,
        area
      } = suggestion
      this.input.value = nom;
    },
    render: function(suggestion, currentInput) {
      if (suggestion) {
        const nom = suggestion.nom
        const div = document.createElement('div')
        div.setAttribute("id", "autocomplete-unitat");
        div.textContent = nom
        return div
      }
    }
  })
  Autocompleter({
    autocomplete: _autocomplete,
    inputEl: proveidorsInputEl,
    optionsRoute: '/proveidors/all',
    onSelect: function(suggestion) {
      const {
        nom,
      } = suggestion
      this.input.value = nom;
    },
    render: function(suggestion, currentInput) {
      if (suggestion) {
        const nom = suggestion.nom
        const div = document.createElement('div')
        div.setAttribute("id", "autocomplete-proveidor");
        div.textContent = nom
        return div
      }
    }
  })
</script>
