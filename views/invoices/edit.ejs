<% layout('layouts/boilerplate')%>

<h3>Editar Comanda núm. <%= invoice.numInvoice %></h3>
<p>
  <b>Responsable: <%= invoice.responsable.username %> </b>
</p>
<form
  action="/invoices/<%=invoice._id%>?_method=PUT"
  method="POST"
  id="formulari"
>
  <div class="table-responsive">
    <table id="taulaOriginal" class="table table-condensed table-hover">
      <tr>
        <th><small>Quantitat</small></th>
        <th><small>Article</small></th>
        <th><small>€/Unitat</small></th>
        <th><small>% IVA</small></th>
        <th><small>Subtotal €</small></th>
        <th><small>Unitat de destí</small></th>
        <th><small>Proveidor</small></th>
      </tr>
      <% let i=0; for (let invoiceItem of invoice.invoiceItems) { i++ %>
      <tr class="trs">
        <div class="form-group container">
          <!-- COMENÇAMENT CAMPS -->
          <th style="display: none;">
            <input
              class="variable petit form-control unitari numeros tipus"
              id="tipusInputTr<%=i%>"
              value="<%= invoiceItem.tipus %>"
            />
          </th>
          <th style="display: none;">
            <input
              class="variable petit form-control unitari numeros naturalesa"
              id="naturalesaInputTr<%=i%>"
              value="<%= invoiceItem.naturalesa %>"
            />
          </th>
          <th>
            <input
              class="variable petit form-control unitari numeros quantitat"
              id="quantitatInputTr<%=i%>"
              value="<%= invoiceItem.quantitat %>"
            />
          </th>
          <th>
            <input
              class="form-control mitja esquerra article"
              id="articleInputTr<%=i%>"
              value="<%= invoiceItem.article %>"
            />
          </th>
          <th>
            <input
              class="variable form-control petit numeros preu"
              id="preuInputTr<%=i%>"
              value="<%= invoiceItem.preu %>"
            />
          </th>
          <th>
            <input
              class="variable form-control numeros unitari iva"
              id="ivaInputTr<%=i%>"
              value="<%= invoiceItem.iva %>"
            />
          </th>
          <th>
            <input
              class="form-control petit_mitja numeros subtotal resultat"
              id="subtotalInputTr<%=i%>"
              value="<%= invoiceItem.subtotal %>"
            />
          </th>
          <th>
            <input
              class="form-control mitja esquerra unitat"
              id="unitatInputTr<%=i%>"
              value="<%= invoiceItem.unitat %>"
            />
          </th>
          <th>
            <input
              class="form-control mitja esquerra"
              id="proveidorInputTr<%=i%>"
              value="<%= invoiceItem.proveidor %>"
            />
          </th>
          <td><button class="botoEsborrar">X</button></td>
          <!-- FINAL CAMPS -->
        </div>
      </tr>
      <% } %>
    </table>
  </div>

  <table>
    <td>
      <button id="relative" class="btn btn-primary form-control">
        Modificar Comanda
      </button>
    </td>

    <div class="h5 row numeros">
      <span class="sumatori-total"
        >Total Comanda: <%= invoice.total %>€ (IVA INCLÒS)
      </span>
    </div>
  </table>
</form>

<p class="h5 row numeros">
  <span class="sumatori-total"></span>
</p>
<p class="row numeros">
  <a id="afegir" href="#" class="link-primary">Afegir Article</a>
</p>

<script type="module">
  import Autocompleter from '../../utils/Autocompleter.js';
  const _autocomplete = <%- autocomplete %>

  const afegirLiniaEl = document.querySelector("#afegir");
  const taulaOriginalEl = document.querySelector("#taulaOriginal");
  const taulaOriginalRowEls = document.querySelectorAll('tr.trs')

  // Attach autocompleters to created rows
  Array.prototype.forEach.call(taulaOriginalRowEls, rowEl => attachRowAutocompleters(rowEl))

  taulaOriginalEl.addEventListener('input', (e) => {
    // Calculate row subtotal
    const { target } = e
    const rowEl = target.closest('tr')
    const rowTotal = getRowTotal(rowEl)
    const subtotalEl = rowEl.querySelector('.subtotal')
    subtotalEl.value = rowTotal.toFixed(2) || 0

    // Calculate table total
    calculateTotals()
  })

  // Afegeixo el listener a la taula i comprovo cada click
  taulaOriginalEl.addEventListener('click', (event) => {
    //event.stopPropagation()
    const clickedEl = event.target;
    // Comprovo que el click vingui de una row o els elements
    // que hi han a dins, a la vegada agafo la rowEl
    const botoEl = clickedEl.closest('.botoEsborrar');
    const trEl = clickedEl.closest('.trs')
    // Si no hi ha rowEl vol dir que s'ha clickat en algun lloc
    // de la taula que no es una row? no se si es possible
    if (botoEl) {
      trEl.remove();
      calculateTotals();
    }
  })

  afegirLiniaEl.addEventListener("click", () => {
    crearLinia()
  })

  function calculateTotals() {
    const tableTotals = getTableTotals(taulaOriginalEl);
    const totalsEl = document.querySelector('.sumatori-total')
    totalsEl.innerText = tableTotals
      ? `Total comanda: ${tableTotals.toFixed(2)}€ (IVA inclòs)`
      : ''
  }

  function getTableTotals(taulaEl) {
    const inputsSubtotals = document.querySelectorAll('.subtotal');
    if (!inputsSubtotals || inputsSubtotals.length === 0) return

    return Array.prototype.reduce.call(taulaEl.rows, (acc, rowEl) => {
      const rowTotal = getRowTotal(rowEl)
      return acc += rowTotal
    }, 0)
  }

  function getRowTotal(rowEl) {
    const quantityEl = rowEl.querySelector('.quantitat')
    const priceEl = rowEl.querySelector('.preu')
    const ivaEl = rowEl.querySelector('.iva')
    const quantity = quantityEl && quantityEl.value || 0
    const price = priceEl && priceEl.value || 0
    const iva = ivaEl && ivaEl.value || 0
    if (!quantity || !price) return 0
    const total = parseFloat(quantity) * parseFloat(price)
    const ivaTotal = ((total) * parseFloat(iva) / 100)
    return total + ivaTotal
  }

  function crearLinia() {
    const rowEls = taulaOriginalEl.rows
    const lastRowEl = rowEls[rowEls.length - 1]
    const newRowEl = lastRowEl.cloneNode(true)
    Array.prototype.forEach.call(newRowEl.querySelectorAll('input'), inputEl => {
      inputEl.setAttribute('value', '')
      inputEl.value = ''
      inputEl.innerText = ''
    })
    lastRowEl.parentElement.append(newRowEl)
    attachRowAutocompleters(newRowEl)
  }

  function attachRowAutocompleters(rowEl) {
    const articleInputEl = rowEl.querySelector('.article')
    const unitatInputEl = rowEl.querySelector('.unitat')

    Autocompleter({
      autocomplete: _autocomplete,
      inputEl: articleInputEl,
      optionsRoute: '/items/all',
      onSelect: function(suggestion) {
        const {
          nom,
          naturalesa,
          tipus
        } = suggestion
        this.input.value = nom;
        const tipusInputEl = rowEl.querySelector('input.tipus')
        const naturalesaInputEl = rowEl.querySelector('input.naturalesa')
        tipusInputEl.value = tipus
        naturalesaInputEl.value = naturalesa
      },
      render: function(suggestion, currentInput) {
        if (suggestion) {
          const nom = suggestion.nom
          const div = document.createElement('div')
          div.setAttribute("id", "autocomplete-article");
          div.textContent = nom
          return div
        }
      }
    })

    Autocompleter({
      autocomplete: _autocomplete,
      inputEl: unitatInputEl,
      optionsRoute: '/unitats/all',
      onSelect: function(suggestion) {
        const {
          nom
        } = suggestion
        this.input.value = nom;
      },
      render: function(suggestion, currentInput) {
        if (suggestion) {
          const nom = suggestion.nom
          const div = document.createElement('div')
          div.setAttribute("id", "autocomplete-article");
          div.textContent = nom
          return div
        }
      }
    })
  }
</script>
