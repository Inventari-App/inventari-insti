<% layout('layouts/boilerplate')%>
<h3 id="titol">Rebre comanda</h3>
<p>
  <b>Responsable: <%= invoice.responsable.username %> </b>
</p>

<div class="d-flex justify-content-end">
    <button id="rebre-comanda-btn" type="button" class="me-2 btn btn-primary mb-2">Rebre articles</button>
    <a href="/invoices/<%=invoice._id%>/print" target="_blank" rel="noopener noreferrer">
      <button class="btn btn-primary print">Imprimeix</button>
    </a>
</div>

<table class="table table-condensed">
  <form id="proformForm" class="form-inline">
    <thead>
      <tr>
        <th></th>
        <th></th>
        <th>Inventariable</th>
        <th>Tipus</th>
        <th>Article</th>
        <th>Quantitat</th>
        <th>Preu unitari</th>
        <th>Tipus IVA</th>
        <th>Subtotal</th>
        <th>Unitat de destí</th>
        <th>Proveidor</th>
        <th>Num. Serie</th>
      </tr>
    </thead>

    <%
      let i = 0
      for (const invoiceItem of invoice.invoiceItems) {
        const item = items.find(item => item.nom == invoiceItem.article) || {}
      %>
        <tbody>
            <tr class="table-secondary">
                <td width="3%">
                  <input id="expand-rows-<%= i %>" type="checkbox" data-bs-toggle="collapse" href="#children-rows-<%= i %>">
                  <label for="expand-rows-<%= i %>" class="bi bi-caret-down-fill"></label>
                </td>
                <td width="3%">
                    <div class="camps">
                        <input class="checkbox-children-rows" type="checkbox" data-target="#children-rows-<%= i %>">
                    </div>
                </td>
                <td width="10%">
                    <div class="camps" name="inventariable"><%= localizeBoolean(item.inventariable) %></div>
                </td>
                <td width="10%">
                    <div class="camps" name="tipus"><%= item.tipus %></div>
                </td>
                <td width="20%">
                    <div class="camps" name="article"><%= invoiceItem.article %></div>
                </td>
                <td width="10%">
                    <div class="numeros" name="quantitat"><%= invoiceItem.quantitat %> unitat/s</div>
                </td>
                <td width="10%">
                    <div class="numeros" name="preu"><%= invoiceItem.preu %> €/u</div>
                </td>
                <td width="10%">
                    <div class="numeros" name="iva"><%= invoiceItem.iva %> %</div>
                </td>
                <td width="10%">
                    <div class="numeros" name="subtotal">
                    <%= invoiceItem.subtotal %> €
                    </div>
                </td>
                <td width="20%">
                    <div class="camps" name="unitat"><%= invoiceItem.unitat %></div>
                </td>
                <td width="20%">
                    <div class="camps" name="proveidor"><%= invoiceItem.proveidor %></div>
                </td>
                <td width="20%"></td>
            </tr>
        </tbody>
        <% if (invoiceItem.quantitat >= 1) { %>
            <tbody id="children-rows-<%= i %>" class="collapse" data-invoice-item-id="<%= invoiceItem._id %>">
                <%
                    for (let i = 0; i < invoiceItem.rebuts.length; i++) {
                    const isRebut = invoiceItem.rebuts[i].rebut
                %>
                    <tr class="row-item <%= isRebut && "disabled" %>">
                        <td width="3%"></td>
                        <td width="3%">
                            <div class="camps">
                                <input type="checkbox" name="rebut" <%= isRebut && "checked disabled" %>>
                            </div>
                        </td>
                        <td width="10%" hidden>
                            <div class="camps value" name="department" data-value="<%= invoice.responsable.department.nom %>" hidden></div>
                        </td>
                        <td width="10%">
                            <div class="camps value" name="inventariable" data-value="<%= item.inventariable %>"><%= item.inventariable ? "Si" : "No" %></div>
                        </td>
                        <td width="10%">
                            <div class="camps value" name="tipus" data-value="<%= item.tipus %>"><%= item.tipus %></div>
                        </td>
                        <td width="20%">
                            <div class="camps value" name="article" data-value="<%= invoiceItem.article %>"><%= invoiceItem.article %></div>
                        </td>
                        <td width="10%">
                            <div class="numeros">1 unitat/s</div>
                        </td>
                        <td width="10%">
                            <div class="numeros value" name="preu" data-value="<%= invoiceItem.preu %>"><%= invoiceItem.preu %> €/u</div>
                        </td>
                        <td width="10%">
                            <div class="numeros value" name="iva" data-value="<%= invoiceItem.iva %>"><%= invoiceItem.iva %> %</div>
                        </td>
                        <td width="10%">
                            <div class="numeros">
                            <%= invoiceItem.subtotal %> €
                            </div>
                        </td>
                        <td width="20%">
                            <div class="camps value" name="unitat" data-value="<%= invoiceItem.unitat %>"><%= invoiceItem.unitat %></div>
                        </td>
                        <td width="20%">
                            <div class="camps value" name="proveidor" data-value="<%= invoiceItem.proveidor %>"><%= invoiceItem.proveidor %></div>
                        </td>
                        <td width="20%">
                            <input class="value" type="text" name="numSerie" value="<%= invoiceItem.rebuts[i].numSerie %>" <%= (isRebut || !item.inventariable) && "disabled" %>>
                        </td>
                    </tr>
                <% } %>
            </tbody>
        <%
            }
            i++
        }
        %>
  </form>
</table>

<% if(currentUser && currentUser.id ===invoice.responsable.id) { %>
<div class="card-body">
  <p class="h5 row numeros">
    <span class="sumatori-total"
      >Total Comanda: <%= invoice.total.toFixed(2) %>€ (IVA inclòs)
    </span>
  </p>
</div>
<% } %>

<% if (invoice.comment) { %>
    <textarea name="comment" id="comment" class="form-control w-100 my-4" disabled rows="5" placeholder="Escriu el teu comentari"><%= invoice.comment %></textarea>
<% } %>

<div class="card-footer text-muted">
  <a href="/invoices">Torna a les comandes</a>
</div>

<script>
  const invoice = <%- invoiceJSON %>;

  // Control all checkboxes selector in parent row
  const checkboxEls = document.querySelectorAll('.checkbox-children-rows')
  Array.prototype.forEach.call(checkboxEls, checkboxEl => {
    const targetId = checkboxEl.dataset.target
    const childrenRowEls = document.querySelectorAll(`${targetId} input[type="checkbox"]:not(:disabled)`)
    checkboxEl.addEventListener('change', () => {
      const isChecked = checkboxEl.checked
      Array.prototype.forEach.call(childrenRowEls, childrenRowEl => childrenRowEl.checked = isChecked)
    })
  })

  const rebreComandaBtn = document.querySelector('#rebre-comanda-btn')
  rebreComandaBtn.addEventListener('click', () => {
    const itemRowEls = document.querySelectorAll('tbody[id^="children-rows-"] tr')
    const checkedItemRowEls = Array.prototype.filter.call(itemRowEls, itemRowEl => itemRowEl.querySelector('input[type="checkbox"]:checked:not(:disabled)'))
    const articles = Array.prototype.map.call(checkedItemRowEls, checkedItemRowEl => {
      const valueEls = checkedItemRowEl.querySelectorAll('div.value, input.value')
      return Array.prototype.reduce.call(valueEls, (acc, valueEl) => {
        return {
          ...acc,
          [valueEl.getAttribute('name')]: valueEl.dataset.value || valueEl.value
        }
      }, {})
    })

    if (!articles.length) return

    const inventariableArticles = articles
      .filter(article => article.inventariable == "true") // filter only articleables

    createArticles(inventariableArticles )
      .then(updateRebuts)
      .then(() => {
        window.location.href = '/invoices'
      })
      .catch(e => console.error(e))
  })
    
  function createArticles(articles) {
    return fetch('/articles', {
      method: 'POST',
      mode: 'cors',
      headers: {
        "Content-Type": 'application/json'
      },
      body: JSON.stringify({ articles })
    })
  }

  function updateRebuts() {
    const invoiceItemRows = document.querySelectorAll('tbody[data-invoice-item-id]')
    const invoiceItemStatuses = Array.prototype.map.call(invoiceItemRows, itemRow => {
      const trEls = itemRow.querySelectorAll('tr')
      const invoiceItemId = itemRow.dataset.invoiceItemId
      const rebuts = Array.prototype.map.call(trEls, trEl => {
        const isRebut = trEl.querySelector('[name=rebut]').checked
        const numSerie = trEl.querySelector('[name=numSerie]').value
        return { rebut: isRebut, numSerie }
      })
      return { invoiceItemId, rebuts }
    })
    const newInvoiceWithRebuts = invoice.invoiceItems.map((invoiceItem, i) => ({...invoiceItem, rebuts: invoiceItemStatuses[i].rebuts}))
    return updateComandaRebuts({ invoiceItems: newInvoiceWithRebuts})
      .then(res => res.json())
      .then(newInvoice => {
        const comandaIsRebuda = checkComandaIsRebuda(newInvoice)
        return comandaIsRebuda && updateComandaStatus()
      })
      .then(() => window.location.href = '/invoices')
  }

  function updateComandaRebuts(data) {
    return fetch('/invoices/<%= invoice._id %>', {
      method: 'PUT',
      mode: 'cors',
      headers: {
        "Content-Type": 'application/json'
      },
      body: JSON.stringify({ ...data })
    })
  }

  function updateComandaStatus() {
    return fetch('/invoices/<%= invoice._id %>/status?redirect=true', {
      method: 'PUT',
      mode: 'cors',
      headers: {
        "Content-Type": 'application/json'
      },
      body: JSON.stringify({ status: 'rebuda' })
    })
  }

  function checkComandaIsRebuda (invoice) {
    const hasNoRebuts = invoice.invoiceItems.some(invoiceItem => {
      return invoiceItem.rebuts.some(({ rebut }) => !rebut)
    })
    return !hasNoRebuts
  }
</script>
